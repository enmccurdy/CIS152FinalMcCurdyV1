@model IEnumerable<CIS152FinalMcCurdyV1.Models.Order>
@* @model Order *@
@* Above or (@model CIS152FinalMcCurdyV1.Models.Order) is just importing a single object/model 
    of Order class (for a details type page)
    Below is importing a List of all the Order class objects. *@
@* @model List<CIS152FinalMcCurdyV1.Models.Order> *@
@* @model List<CIS152FinalMcCurdyV1.Models.ToDo> *@
@{
    ViewData["Title"] = "Index";
}

@* <h1>Index</h1> *@
<div class="text-center pageHeader">
    <h1 class="display-4">Welcome To CIS152 Drink Shop - Orders Index</h1>
</div>
<p>
    <a asp-action="Create">Create New Order</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.OrderDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.OrderTotal)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Customer)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.OrderDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.OrderTotal)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Customer.CustomerId)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.OrderId">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.OrderId">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.OrderId">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
@* <div class="row">
        @foreach(var item in Model)
        { *@
@* bootstrap abbrev: "col-6" means for this div in this row will use 6 of 12 columns. "d-flex" created a flex box for
                its content.
            *@
@* <div class="col-6">
                <div >
                    @item.OrderId
                </div>
                <div>
                    @item.OrderDate
                </div>
                <div>
                    @item.OrderTotal.ToString("N2")
                </div>
                <div class="d-flex justify-content-center">
                    @item.ToString()
                </div> *@
@* Can create a button to take user to a details page about this specific Model Order object -
                    good practice? to keep a folder in Views specific to each Model class & the folder will contain
                    an index page for that class and a 'details' page for the specified Object - passing the item's Id
                    when <a> calls the 'Details' page. Bootstrap 'btn-info' is a light blue color.
                *@
@* <div class="d-flex justify-content-center">
                    <a class="btn btn-info" asp-action="Details" asp-route-id="@item.OrderId">View Order Details</a>
                </div>
            </div>

        } *@
@* if on a details type page want to loop through Drinks in Order object try below version *@
@* <div class="d-flex justify-content-center">
            Drinks:
            <ul>
                @foreach (var item in Model.Drinks)
                {
                    <li>
                        @item.Drink.DrinkId
                    </li>
                }
            </ul>
        </div> *@
@* Can add a button to the 'Details' page to redirect back to the 'Index' page. *@
@*<div class="d-flex justify-content-center">
            <a class="btn btn-info" asp-action="Index" >Return to All Orders Page</a>
        </div>
    </div>*@
@* </div> *@ @* end <div class="container"> *@